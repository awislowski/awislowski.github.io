{"name":"SpringOne Conference retro","tagline":"","body":"1. Spring IO - Platform reinvented:\r\n * ![](/images/sc5.png)\r\n * ![](/images/sc2.png)\r\n * Spring IO Roadmap\r\n * ![](/images/sc3.png)\r\n * Spring Cloud allow usage of Sso just one Annotation\r\n * ![](/images/sc4.png)\r\n2. Groovy & Grails \r\n * ![](/images/sc6.png) \r\n * ![](/images/sc7.png) \r\n * Groovy Template\r\n   ![](/images/sc8.png) \r\n * Grails 3.0 \r\n  ![](/images/sc9.png)\r\n  ![](/images/sc10.png) \r\n * Modularization in plugins. Divided in 3 parts \r\n  ![](/images/sc11.png) \r\n3. Spring 4.1 changes\r\n * ![](/images/sc12.png) \r\n * ![](/images/sc13.png)\r\n * Web resources handling\r\n  ![](/images/sc14.png)\r\n4. Spring XD\r\n * ![](/images/sc15.png)\r\n * ![](/images/sc16.png)\r\n * ![](/images/sc17.png)\r\n * ![](/images/sc18.png)\r\n * ![](/images/sc19.png)\r\n * ![](/images/sc20.png)\r\n5. JVM tuning\r\n * \r\n  ![](/images/sc21.png)\r\n * Category 1 - typical Web Apllications\r\n  problem with CPU contension\r\n  ![](/images/sc22.png) \r\n * Category 2 - In-memory Databases, Messaging systems\r\n  ![](/images/sc23.png)\r\n  less socket is enough, less NUMA interleaving\r\n * Do beanchmarks\r\n * If servers are not equal, then you need to scale loadbalancer with weight algorithm\r\n * Memory on server\r\n  ![](/images/sc24.png)\r\n  Category 1\r\n  ![](/images/sc25.png)\r\n  Category 2\r\n  ![](/images/sc26.png)\r\n * Numa architecture\r\n  ![](/images/sc27.png)\r\n  ![](/images/sc28.png)\r\n  ![](/images/sc29.png)\r\n  ![](/images/sc30.png)\r\n  ![](/images/sc31.png)\r\n * Example\r\n  ![](/images/sc32.png)\r\n  ![](/images/sc33.png)*\r\n  ![](/images/sc34.png)*\r\n  ![](/images/sc35.png)\r\n6. Spring Social\r\n  ![](/images/sc36.png)\r\n  ![](/images/sc37.png) \r\n  ![](/images/sc38.png)\r\n  ![](/images/sc39.png)\r\n  ![](/images/sc40.png)\r\n  * OAuth 2 - decided not to encript message (https is enough)\r\n  ![](/images/sc35.png)\r\n  ![](/images/sc36.png)\r\n  ![](/images/sc37.png)\r\n  ![](/images/sc38.png)\r\n  ![](/images/sc39.png)\r\n  ![](/images/sc40.png)\r\n  ![](/images/sc41.png)\r\n  ![](/images/sc42.png)\r\n  ![](/images/sc43.png)\r\n  ![](/images/sc44.png)\r\n  ![](/images/sc45.png)\r\n  ![](/images/sc46.png)\r\n  ![](/images/sc47.png)\r\n  ![](/images/sc48.png)\r\n  Get from github code examples\r\n  injection Facebook and Twitter\r\n  ![](/images/sc50.png)\r\n7. Resource Handling\r\n * ![](/images/sc51.png)\r\n * ![](/images/sc52.png)\r\n * ![](/images/sc53.png)\r\n * ![](/images/sc54.png)\r\n * ![](/images/sc55.png)\r\n * ![](/images/sc56.png)\r\n * ![](/images/sc57.png)\r\n * ![](/images/sc58.png)\r\n * ![](/images/sc59.png)\r\n * ![](/images/sc60.png)\r\nSpring resource github example\r\n rewrite resources in views (jsp, freemarker, ...)\r\n8. Microservices - how to deal with them\r\n * ![](/images/sc61.png)\r\n * The easiest\r\n   ![](/images/sc62.png)\r\n * ![](/images/sc63.png)\r\n * ![](/images/sc64.png) \r\n * ![](/images/sc65.png)\r\n * ![](/images/sc66.png)\r\n * ![](/images/sc67.png)\r\n * Config Server\r\n ![](/images/sc60.png)\r\n * ![](/images/sc61.png)\r\n * Refresh example\r\n![](/images/sc62.png)\r\n * Configuration encripted through transfer\r\n *Eureka\r\n  ![](/images/sc63.png)\r\n  ![](/images/sc64.png)\r\n * Hystrix\r\n  ![](/images/sc66.png)\r\n  ![](/images/sc67.png)\r\n  ![](/images/sc68.png)\r\n  ![](/images/sc69.png)\r\n  ![](/images/sc70.png)\r\n  ![](/images/sc71.png)\r\n  ![](/images/sc73.png)\r\n  ![](/images/sc74.png)\r\n  ![](/images/sc75.png)\r\n  ![](/images/sc76.png)\r\n  * Feign, Hystrix, Eureka \r\n   ![](/images/sc77.png)\r\n   ![](/images/sc78.png)\r\n   ![](/images/sc79.png)\r\n  * Zuul ???\r\n   ![](/images/sc81.png)\r\n   ![](/images/sc82.png)\r\n  * Archaius\r\n   ![](/images/sc83.png)\r\n  * Bus\r\n   ![](/images/sc84.png)\r\n  * Summary\r\n   ![](/images/sc83.png)\r\n9. \r\n\r\n\r\nXD Spring z pdf ze szkolenia\r\n\r\n1. Spring 4.1\r\n * https://spring.io/blog/2014/09/04/spring-framework-4-1-ga-is-here\r\n * groovy markup templates\r\n \r\n2. Spring Boot\r\n *\r\n3. Groovy android\r\n\r\n5. Netflix \r\n * Ribbon\r\n * Eureka \r\n * Hytrix & Turbine\r\n * Feign\r\n * Zuul\r\n * Archaius\r\n * Curator\r\n * Asgaard\r\n * (131837426) @RefreshScope\r\n * Spring Cloud Starters(141431152)\r\n6. yml configuration examples\r\n7. Spring Cloud\r\n8. Groovy puzzlers\r\n9. Tests\r\n * Siege - http://freecode.com/projects/siege\r\n * Running many micro EC2 virtual instances for load test of web application shttps://github.com/newsapps/beeswithmachineguns\r\n * WBench is a tool that uses the HTML5 performance timing API to benchmark end user load times for websites. It simulates users visiting your website for the first time, with nothing of your site cached. https://github.com/desktoppr/wbench\r\n10. Prezentation Hadoop with 1000 nodes\r\n11. Venkat - http://agiledeveloper.com\r\n12. Exhibitor - https://github.com/Netflix/exhibitor/wiki\r\n * Remote configuration - Zookeeper \r\n * objects not properties\r\n * @EnableRemoteConfig and @Value\r\n\r\n14. Cloud Foundry\r\n15. Grails 3.0\r\n16. SpringSocial\r\n17. Spring Hadoop\r\n * forcasting current usage (202030734)\r\n18. Looking Ahead (202445000)\r\n\r\nMaterials:\r\ngithub.com/SpringOne2GX-2014/\r\n\r\nMetaSpace\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}